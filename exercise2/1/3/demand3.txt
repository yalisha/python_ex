
---

## **程序需求文件（修正版）**

### **1. 项目概述**
开发一个基于网页的自动排班系统，用户可以通过前端输入志愿者的课表（每周5天，每天6节课），系统根据志愿者的空余时间自动生成值班表。系统支持以下功能：
- 允许用户一次输入一个志愿者的多个空余时间。
- 支持每周5天、每天6节课的固定班次设置。
- 调节每节课的值班人数。
- 尽量平均分配每个志愿者的值班次数。
- 如果某节课无法排班，则在生成的表格中将其标红。

---

### **2. 功能需求**
#### **2.1 用户输入**
- **志愿者课表输入**：
  - 每个志愿者需要输入每周5天的课表，每天6节课。
  - 每节课的状态为“有课”或“无课”（空闲）。
  - 用户可以一次输入一个志愿者的多个空余时间。
- **班次设置**：
  - 班次固定为每周5天，每天6节课（第一节到第六节）。
  - 用户可以设置每节课需要的人数。

#### **2.2 排班算法**
- **空闲时间计算**：
  - 系统根据志愿者的课表计算每个志愿者的空闲时间段。
- **排班规则**：
  - 每节课的值班人数由用户设置。
  - 尽量平均分配每个志愿者的值班次数。
  - 值班时间不能与志愿者的课程时间冲突。
- **冲突检测**：
  - 如果某节课没有足够的空闲志愿者，系统应在生成的值班表中将该节课标红。

#### **2.3 输出与导出**
- **值班表展示**：
  - 在网页上展示生成的值班表，包括每天的6节课、每节课的值班志愿者名单。
  - 如果某节课无法排班，则将其标红。
- **导出功能**：
  - 支持将值班表导出为 Excel 或 CSV 文件。

#### **2.4 用户界面**
- **志愿者管理界面**：
  - 提供表格或表单，方便用户输入志愿者的课表。
  - 支持一次输入一个志愿者的多个空余时间。
- **班次设置界面**：
  - 提供表单，允许用户设置每节课需要的人数。
- **值班表展示界面**：
  - 以表格形式展示生成的值班表，支持排序和筛选。

---

### **3. 非功能需求**
#### **3.1 性能**
- 系统应能处理至少100名志愿者的课表，并在5秒内生成值班表。

#### **3.2 兼容性**
- 支持主流浏览器（如 Chrome、Firefox、Safari、Edge）。

#### **3.3 安全性**
- 所有数据仅在浏览器端处理，不上传到服务器，确保用户隐私。

#### **3.4 易用性**
- 界面简洁直观，用户无需培训即可使用。

---

### **4. 技术需求**
#### **4.1 前端技术**
- **框架**：React 或 Vue.js。
- **UI 库**：Ant Design 或 Material-UI。
- **文件处理**：使用 `xlsx` 库解析和生成 Excel 文件。

#### **4.2 排班算法**
- 使用贪心算法或约束满足问题（CSP）算法实现排班逻辑。

#### **4.3 数据存储**
- 使用浏览器的 `localStorage` 或 `IndexedDB` 临时存储用户输入的数据。

---

### **5. 数据格式**
#### **5.1 课表输入格式**
- 每个志愿者的课表为一个二维数组，表示5天×6节课的状态（0表示空闲，1表示占用）：
  ```json
  [
    [0, 1, 0, 0, 1, 0], // 第1天
    [1, 0, 0, 1, 0, 0], // 第2天
    [0, 0, 1, 0, 0, 1], // 第3天
    [1, 0, 0, 0, 1, 0], // 第4天
    [0, 1, 0, 1, 0, 0]  // 第5天
  ]
  ```

#### **5.2 班次设置格式**
- 班次设置为一个数组，每个元素包含每节课需要的人数：
  ```json
  [2, 3, 2, 2, 3, 1] // 每节课需要的人数（第一节到第六节）
  ```

#### **5.3 值班表输出格式**
- 值班表为一个二维数组，表示5天×6节课的值班志愿者名单：
  ```json
  [
    [["张三", "李四"], ["王五", "赵六", "陈七"], [], ["刘八", "孙九"], [], []], // 第1天
    [[], ["张三", "李四"], ["王五", "赵六"], [], ["陈七", "刘八"], ["孙九"]], // 第2天
    // 其他天...
  ]
  ```
  - 如果某节课无法排班，则对应的数组为空，并在展示时标红。

---

### **6. 开发计划**
#### **6.1 第一阶段：需求分析与设计**
- 确定功能需求和技术方案。
- 设计用户界面原型。

#### **6.2 第二阶段：前端开发**
- 实现志愿者管理界面和班次设置界面。
- 实现值班表展示界面。

#### **6.3 第三阶段：排班算法开发**
- 实现空闲时间计算和排班逻辑。
- 实现冲突检测和标红功能。

#### **6.4 第四阶段：测试与优化**
- 测试系统功能，修复 bug。
- 优化性能和用户体验。

#### **6.5 第五阶段：部署与发布**
- 将系统部署到静态托管平台（如 GitHub Pages）。
- 编写用户文档。

---

### **7. 测试计划**
- **单元测试**：测试排班算法的正确性。
- **集成测试**：测试前端界面与算法的交互。
- **用户测试**：邀请志愿者试用系统，收集反馈并改进。

---

### **8. 风险与应对**
- **风险**：排班算法复杂度高，可能导致性能问题。
  - **应对**：优化算法，限制志愿者数量。
- **风险**：用户输入错误（如课表格式不正确）。
  - **应对**：提供输入验证和错误提示。

---

### **9. 交付物**
- 可运行的网页前端系统。
- 用户文档（包括使用说明和示例）。
- 测试报告。

---

### **10. 附录**
- **示例课表**：提供示例课表文件，用于测试。
- **示例班次设置**：提供示例班次设置，用于测试。

---

以上是修正后的程序需求文件，开发团队可根据此文档进行系统设计和开发。